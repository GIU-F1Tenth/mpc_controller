function [allData, scenario, sensor] = Road1()
%Road1 - Returns sensor detections
%    allData = Road1 returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = Road1 optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 24.2 (R2024b) and Automated Driving Toolbox 24.2 (R2024b).
% Generated on: 12-Mar-2025 00:42:45

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensor = createSensor(scenario);

% Add sensor to scenario
addSensors(scenario, sensor, egoVehicle.ActorID);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    time  = scenario.SimulationTime;

    if ~isa(sensor,'insSensor')
        poses = targetPoses(scenario,sensor.SensorIndex);
    end
    % Generate detections for the sensor
    laneDetections = [];
    objectDetections = [];
    insMeas = [];
    [ptClouds, isValidPointCloudTime] = sensor();

    % Aggregate all detections into a structure for later use
    if isValidPointCloudTime
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release the sensor object so it can be used again.
release(sensor);

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function sensor = createSensor(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensor = lidarPointCloudGenerator('SensorIndex', 1, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 10, ...
    'AzimuthLimits', [-10 10], ...
    'ActorProfiles', profiles);

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [-7.5 -5.2 0;
    24 -5 0;
    30.6 1.6 0;
    30.2 17.9 0;
    31.7 30.7 0;
    53 31.9 0;
    59.4 22.7 0;
    59.4 10.7 0;
    58.2 -3.9 0;
    57.5 -10.3 0;
    55.4 -18.7 0;
    40.9 -25.4 0;
    26.5 -24.4 0;
    -13.5 -28.4 0];
laneSpecification = lanespec(2, 'Width', 6);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-9 -9.1 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-9 -9.1 0;
    1 -10.2 0;
    10.5 -10.7 0;
    20.3 -9.8 0;
    29.9 -5 0;
    35.1 3.9 0;
    33.8 18 0;
    33.2 26.2 0;
    38 33.3 0;
    46.7 32.9 0;
    53.3 27.9 0;
    57.7 20.7 0;
    56.2 5.6 0;
    55.1 -7.5 0;
    52.6 -18.6 0;
    42.6 -22.3 0;
    28.9 -21.4 0;
    13.6 -21.2 0;
    0.7 -22.4 0;
    -13 -24.4 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30];
trajectory(egoVehicle, waypoints, speed);

